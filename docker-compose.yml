services:
  n8n:
    build: .
    environment:
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-Europe/Madrid}
      - TZ=${TZ:-Europe/Madrid}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=$SERVICE_USER_POSTGRES
      - DB_POSTGRESDB_SCHEMA=public
      - DB_POSTGRESDB_PASSWORD=$SERVICE_PASSWORD_POSTGRES
    volumes:
      - 'n8n-data:/home/node/.n8n'
    labels:
      - traefik.http.middlewares.n8n-gzip.compress=true
      - traefik.http.middlewares.n8n-gzip.compress.excludedcontenttypes=text/event-stream
      - traefik.http.routers.n8n-https.rule=Host(`${N8N_HOST}`)
      - traefik.http.routers.n8n-https.middlewares=n8n-gzip@docker
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- http://127.0.0.1:5678/'
      interval: 5s
      timeout: 20s
      retries: 10
  postgresql:
    image: postgres:16-alpine
    volumes:
      - 'postgresql-data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_USER=$SERVICE_USER_POSTGRES
      - POSTGRES_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      - 'POSTGRES_DB=${POSTGRES_DB:-n8n}'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'
      interval: 5s
      timeout: 20s
      retries: 10
